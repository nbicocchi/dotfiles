#!/bin/bash

# Configuration
RECIPIENT="nicola.bicocchi@gmail.com"
STORAGE_ENC_REMOTE="/run/user/1000/gvfs/google-drive:host=unimore.it,user=nbicocchi/0AM-alrhdq_d4Uk9PVA/0B8-alrhdq_d4MDJuVWs4NlVGMnM/1WgF9Hw3hx50XzhORJhRZmETYV1067uPB"
STORAGE_ENC_LOCAL="$HOME"/.mypasswd/mypasswd.gpg
PASSWORD_LENGTH=8
TOCLIPBOARD="xclip -selection clipboard"

# Functions
usage() {
  printf "\nUsage:\n"
  echo "-g Generate a new password"
  echo "-e Edit credentials"
  echo "-d Decipher credentials"
  echo "-s Search credentials"
  exit 1
}

verify_deps() { 
  which gpg >/dev/null 2>&1 || error "unable to find gpg. please install." 
  which fzf >/dev/null 2>&1 || error "unable to find fzf. please install." 
  which openssl >/dev/null 2>&1 || error "unable to find openssl. please install." 
  which xclip >/dev/null 2>&1 || error "unable to find xclip. please install."
  which mktemp >/dev/null 2>&1 || error "unable to find mktemp. please install." 
}

verify_keys() {
  gpg --list-secret-keys | grep "$RECIPIENT" > /dev/null 2>&1 || error "Missing keys for "$RECIPIENT". Import with gpg --import keys"
}

verify_local_folder() {
  mkdir -p $(dirname "$STORAGE_ENC_LOCAL") || error "unable to create local folder"
}

verify_local_file() {
  [ -r "$STORAGE_ENC_LOCAL" ] || error "unable to find encrypted local file"
}

copy_remote_to_local() {
  if [ ! -r "$STORAGE_ENC_REMOTE" ]; then
    warn "unable to fetch from remote"
    sleep 1
  else 
    cp "$STORAGE_ENC_REMOTE" "$STORAGE_ENC_LOCAL" 
  fi
}

copy_local_to_remote() {
  if [ ! -r "$STORAGE_ENC_REMOTE" ]; then
    warn "unable to push to remote"
    sleep 1
  else 
    cp "$STORAGE_ENC_LOCAL" "$STORAGE_ENC_REMOTE" 
  fi
}

error() {
  echo "[ERROR]: $1" 
  exit 1
}

warn() {
  echo "[WARNING]: $1" 
}

generate_password() {
  password=$(openssl rand -base64 "$PASSWORD_LENGTH") 
  echo "$password" 
  echo "$password" | $TOCLIPBOARD
}

edit_credentials() {
    STORAGE_DEC="$(mktemp)"
    gpg --decrypt "$STORAGE_ENC_LOCAL" > "$STORAGE_DEC"
    "$EDITOR" "$STORAGE_DEC"
    gpg --encrypt --recipient "$RECIPIENT" --output "$STORAGE_ENC_LOCAL" "$STORAGE_DEC"
    rm -rfP "$STORAGE_DEC" >/dev/null 2>&1
}

decipher_credentials_all() { 
  gpg --decrypt "$STORAGE_ENC_LOCAL"
}

decipher_credentials_interactive() {
  all=$(decipher_credentials_all)
  selection=$(echo "$all" | fzf --exact)
  echo "$selection"
  echo "$selection" | cut -d '#' -f 4 | xargs | $TOCLIPBOARD
}

# Main
verify_deps
verify_keys

[ $# -eq 0 ] && usage

while getopts "gedsh" o; do
    case "$o" in
        g) generate_password
           ;;
        e) verify_local_folder 
           copy_remote_to_local
           verify_local_file  
           edit_credentials
           copy_local_to_remote
           ;;
        d) verify_local_folder 
           copy_remote_to_local
           verify_local_file 
           decipher_credentials_all
           ;;
        s) verify_local_folder 
           copy_remote_to_local
           verify_local_file 
           decipher_credentials_interactive
           ;;
        h) usage
           ;;
        *) usage
           ;;
    esac
    exit 0
done

